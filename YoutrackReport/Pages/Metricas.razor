@page "/Metricas"

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using YoutrackReport.DTOs
@using YoutrackReport.Servicios.Contrato
@using System.Collections.Generic
@using YoutrackReport.Servicios.Impllementacion

@using ChartJs.Blazor;

@inject ObtieneMetricas ObtieneMetricasService


<!-- Archivo CSS para estilos de las cartas -->
@* <link rel="stylesheet" href="~/css/metricasStyle.css" /> *@


<!-- INICIO HTML -->

<div class="container text-center">
    <div class="row">
        <div class="col-md-12" style="padding-bottom: 10px">
            <h2>Métricas</h2>
        </div>
    </div>

    @* <div class="row">
        <div class="col-md-12">
            <label for="selectYear">Seleccionar Año:</label>
            <select id="selectYear" @onchange="ActualizarMetricas">
                <option value="2024">2024</option>
                <option value="2023">2023</option>
            </select>
        </div>
    </div> *@

    @if (metricas != null)
    {
        <div class="row">
            <div class="col-md-12">

                <div class="card text-dark bg-light mb-3">

                    <div class="card-body">

                        <div class="row">
                            <div class="col-md">
                                <div class="card text-white bg-purple mb-3 estado-box">
                                    <div class="card-body">
                                        <h5 class="card-title">Prod 2023</h5>
                                        <p class="card-text">@lista.CantidadTerminado2023</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="card text-white bg-warning mb-3 estado-box">
                                    <div class="card-body">
                                        <h5 class="card-title">Prod 2024</h5>
                                        <p class="card-text">@lista.CantidadTerminado2024</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="card text-white bg-blue mb-3 estado-box">
                                    <div class="card-body">
                                        <h5 class="card-title">En curso</h5>
                                        <p class="card-text">@lista.CantidadEnCurso</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="card text-white bg-success mb-3 estado-box">
                                    <div class="card-body">
                                        <h5 class="card-title">Terminado</h5>
                                        <p class="card-text">@lista.CantidadTerminado2024</p>
                                    </div>
                                </div>
                            </div>
                            @* <div class="col-md">
                                <div class="card text-white bg-red mb-3 estado-box">
                                    <div class="card-body">
                                        <h5 class="card-title">Total atrasos</h5>
                                        <p class="card-text">...</p>
                                    </div>
                                </div>
                            </div> *@
                        </div>

                    </div>

                </div>


            </div>
        </div>


        <!-- TABLA JP -->
        <div class="row" style="padding-top: 50px">
            <div class="col-12">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th scope="col">Jefe de proyectos</th>
                            <th scope="col">En curso</th>
                            <th scope="col">En desarrollo</th>
                            <th scope="col">QA</th>
                            <th scope="col">Producción</th>
                            <th scope="col">Atrasados</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var jefeProyecto in lista.kPI_Lista_JPs.OrderBy(j => j.NomJP))
                        {
                            <tr>
                                <td class="text-start">@jefeProyecto.NomJP</td>
                                <td style="cursor: pointer" data-bs-toggle="modal" data-bs-target='@($"#exampleModal{jefeProyecto.NomJP.GetHashCode()}")' @onclick='(() => traerDatosDetallesJP(jefeProyecto.NomJP, "En curso"))'>@jefeProyecto.CantidadEncursoJP</td>
                                <td>@jefeProyecto.CantidadDesarrolloJP</td>
                                <td>@jefeProyecto.CantidadQAJP</td>
                                <td class="modal-atraso" style="cursor: pointer;" data-bs-toggle="modal" data-bs-target='@($"#exampleModal{jefeProyecto.NomJP.GetHashCode()}")' @onclick='(() => traerDatosDetallesJP(jefeProyecto.NomJP, "Producción"))'>
                                    <span class='@((jefeProyecto.CantidadProdJP != 0) ? "prod-con-valor" : "")'>@jefeProyecto.CantidadProdJP</span>
                                </td>
                                <td class="modal-atraso" style="cursor: pointer;" data-bs-toggle="modal" data-bs-target='@($"#exampleModal{jefeProyecto.NomJP.GetHashCode()}")' @onclick='(() => traerDatosDetallesJP(jefeProyecto.NomJP, "Atrasados"))'>
                                    <span class='@((jefeProyecto.TotalAtrasosJP != 0) ? "atraso-con-valor" : "")'>@jefeProyecto.TotalAtrasosJP</span>
                                </td>

                                @* <td>
                        <!-- Cambio en el atributo data-bs-target para incluir el hash del nombre del jefe de proyecto -->
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="@($"#exampleModal{jefeProyecto.NomJP.GetHashCode()}")" @onclick="(() => traerDatosDetallesJP(jefeProyecto.NomJP))">
                        Detalles atrasos
                        </button>
                        </td> *@
                            </tr>

                            <!-- Modal -->
                            <!-- Cambio en el id del modal para incluir el hash del nombre del jefe de proyecto -->
                            <div class="modal fade" id="@($"exampleModal{jefeProyecto.NomJP.GetHashCode()}")" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-xl">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <!-- Cambio en el título del modal para incluir el nombre del jefe de proyecto -->
                                            <h5 class="modal-title" id="exampleModalLabel">Detalles @tipoDetalles del jefe de proyecto @jefeProyecto.NomJP</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            @if (cargandoDetallesJP == jefeProyecto.NomJP)
                                            {
                                                <!-- Spinner para indicar que se están cargando los detalles -->
                                                <div class="spinner-border" role="status">
                                                    <span class="visually-hidden">Cargando...</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th scope="col">Proyecto</th>
                                                            <th scope="col">Dev</th>
                                                            <th scope="col">Estado</th>
                                                            <th scope="col">Fecha En desarrollo</th>
                                                            <th scope="col">Fecha QA</th>
                                                            <th scope="col">Fecha Produccion</th>
                                                            <th scope="col">Url YT</th>
                                                            <th scope="col">Url Jira</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var atrasoModal in (tipoDetalles == "Atrasados" ? listaAtrasados : (tipoDetalles == "En curso" ? listaEnCurso : listaProduccion)))
                                                        {
                                                            // Itera sobre la lista correspondiente según el tipo de detalles (Atrasados o En curso)
                                                            <tr>
                                                                <td>@atrasoModal.idReadable</td>
                                                                <td>@atrasoModal.Assignee</td>
                                                                <td>@atrasoModal.State</td>
                                                                <td>
                                                                    <!--Condicion para eliminar la hora de las fechas ya que algunas fechas son nulas -->
                                                                    @if (!string.IsNullOrEmpty(atrasoModal.FechaTerminoDesa))
                                                                    {
                                                                        @(DateTime.Parse(atrasoModal.FechaTerminoDesa).ToString("dd-MM-yyyy"))
                                                                    }
                                                                </td>
                                                                <td>
                                                                    @if (!string.IsNullOrEmpty(atrasoModal.FechaTerminoQA))
                                                                    {
                                                                        @(DateTime.Parse(atrasoModal.FechaTerminoQA).ToString("dd-MM-yyyy"))
                                                                    }
                                                                </td>
                                                                <td>
                                                                    @if (!string.IsNullOrEmpty(atrasoModal.FechaTerminoReal))
                                                                    {
                                                                        @(DateTime.Parse(atrasoModal.FechaTerminoReal).ToString("dd-MM-yyyy"))
                                                                    }
                                                                </td>
                                                                <td><a href="@atrasoModal.UrlYT" target="_blank">Ir</a></td>
                                                                <td><a href="@atrasoModal.URLJira" target="_blank">Ir</a></td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            }
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="spinner-grow text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    }
</div>

<!-- FIN HTML -->
@code {
    private string cargandoDetallesJP = null;
    private string tipoDetalles;
    private List<FieldsDTO> metricas;
    public int totalProyectos = 0;
    private MetricasKPI lista = new();
    private List<FieldsDTO> listaAtrasados = new();
    private List<FieldsDTO> listaEnCurso = new();
    private List<FieldsDTO> listaProduccion = new();

    private string selectedYear = "2024"; // Año predeterminado


    // private async Task ActualizarMetricas(ChangeEventArgs e)
    // {
    //     selectedYear = e.Value.ToString();

    //     try
    //     {
    //         metricas = await ObtieneMetricasService.ObtenerDatosComunes();

    //         // Filtrar por año seleccionado
    //         metricas = metricas
    //             .Where(x => x.Project != "Control de calidad Prosys" && x.FechaTerminoReal != null && DateTime.Parse(x.FechaTerminoReal).Year == int.Parse(selectedYear))
    //             .ToList();

    //         // Recalcular totales
    //         totalProyectos = metricas.Count;
    //         MetricasKPI metricasKPI = ObtieneMetricasService.CalcularTotales(metricas);
    //         metricasKPI = await ObtieneMetricasService.CalcularTotalesPorJP(metricas, metricasKPI);
    //         lista = metricasKPI;

    //         // Forzar la actualización del estado para que se refleje inmediatamente en la interfaz de usuario
    //         StateHasChanged();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error al obtener métricas: {ex.Message}");
    //     }
    // }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            metricas = await ObtieneMetricasService.ObtenerDatosComunes();

            if (metricas != null)
            {
                //Cuenta todos los proyectos excluyendo los Control de calidad Prosys
                metricas = metricas.Where(x => x.Project != "Control de calidad Prosys").ToList();

                totalProyectos = metricas.Count;
                MetricasKPI metricasKPI = ObtieneMetricasService.CalcularTotales(metricas);
                metricasKPI = await ObtieneMetricasService.CalcularTotalesPorJP(metricas, metricasKPI);
                lista = metricasKPI;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener métricas: {ex.Message}");
        }
    }

    private async Task traerDatosDetallesJP(string jefeProyecto, string tipo)
    {
        try
        {
            tipoDetalles = tipo;
            // Establecer la variable de carga para mostrar el spinner
            cargandoDetallesJP = jefeProyecto;
            // Forzar la actualización del estado para que se refleje inmediatamente en la interfaz de usuario
            StateHasChanged();

            metricas = await ObtieneMetricasService.ObtenerDatosComunes();

            //Cuenta todos los proyectos excluyendo los Control de calidad Prosys
            metricas = metricas.Where(x => x.Project != "Control de calidad Prosys").ToList();

            // Verifica el tipo de detalles
            if (tipoDetalles == "Atrasados")
            {
                //Si es "Atrasados", obtiene los detalles de atrasos para el jefe de proyecto
                listaAtrasados = ObtieneMetricasService.DetallesJPModal(metricas, jefeProyecto, tipo);
            }
            else if (tipoDetalles == "En curso")
            {
                //Si es "En curso", obtiene los detalles de atrasos para el jefe de proyecto
                listaEnCurso = ObtieneMetricasService.DetallesJPModal(metricas, jefeProyecto, tipo);
            }
            else if (tipoDetalles == "Producción")
            {
                //Si es "En curso", obtiene los detalles de atrasos para el jefe de proyecto
                listaProduccion = ObtieneMetricasService.DetallesJPModal(metricas, jefeProyecto, tipo);
            }

        }
        finally
        {
            // Restablecer la variable de carga después de completar la obtención de datos
            cargandoDetallesJP = null;
        }
    }

}